Three colors of disjoint sets Atoms/Vars/Lists refer to sets of all
coordinates that are interpreted to point to the same atoms/vars/list.
All coords assume be written wrt the whole kb.
	1. Atoms
		1.1. No prefix across all kb of any other entity.
		1.2. Equal coords must point to same atom.
		1.3. rdf:nil is considered an atom.
	2. Vars
		2.1. No prefixes in same class, otherwise occurs check fails.
		2.2. If prefixes found across kb, then the prefix containing
		class changes color to list.
	3. Lists
		3.1. No prefixes in same class (occurs check).
		3.2. Taking the coords in the same class as a prefix, then
		across the whole kb, all suffixes of those prefixes should be
		equal (i.e. one suffix to all prefixes).

1.1 and 1.3 are achieved automatically by properly calculating the coordinates
from the ast. The rest are needed to be checked with every merge.

Below x,y are coords, *x and *y denote their representative (or its color only).
x~y means they're in the same equivalence class.

Given two terms X,Y represented as sets of coordinates and x,y are coordinates
chosen from them respectively, we have 10 unification rules. Note that the
following rules affect the dsds that are stored at the kb level rather at the
term level.
									 
	 *x atom			*x var		*x atom		 *x list
	 *y atom	*x atom		*y var		*y list		 *y list
	---------       -------        --------        ---------        ---------    
	  x ~ y        	              	x ~ y		 x ~ y		  x ~ y
	  x!=y        	 x < y		x < y		      	          x < z, y !< z
	=========	=======		=======		=======		================
	 throw		 throw		 throw		 throw		  throw 


		     	 *x var  	 *x atom	  *x list		 *x var
	 *x var		 *y var        	 *y atom	  *y atom or list	 *y atom or list
	--------        ---------      	---------   	------------------	--------
	 		 x!~ y         	 x ~ y              	         	  x = y		
	 x < y 		 x < y           x = y		  x < y
	=========       =========      	=========        ==========		========
	 *x list	 *x list       	  nop   	   add y         	  x ~ y


which can apparently be simplified into 6 rules:

{ *x atom.	*y atom. 	x~y. 	x!=y 	} => throw.
{ *x atom.	*y list. 	x~y		} => throw.
{ *x atom.	x<y 				} => throw.
{ *x var.	*y var. 	x~y. 	x<y	} => throw.
{ *x var.	x=y				} => x~y.
{ *x var.	*y var.		*x<*xx	*y<*yy	x~y. x<a x<b 	} => a~b, *x list, *y list.

Caching
=======

All coordinates has to be maintained uniquely, and to keep a pointer to their
longest prefix coordinate. 
