Three colors of disjoint sets Atoms/Vars/Lists refer to sets of all
coordinates that are interpreted to point to the same atoms/vars/list.
All coords assume be written wrt the whole kb.
	1. Atoms
		1.1. No prefix across all kb of any other entity.
		1.2. Equal coords must point to same atom.
		1.3. rdf:nil is considered an atom.
	2. Vars
		2.1. No prefixes in same class, otherwise occurs check fails.
		2.2. If prefixes found across kb, then the prefix containing
		class changes color to list.
	3. Lists
		3.1. No prefixes in same class (occurs check).
		3.2. Taking the coords in the same class as a prefix, then
		across the whole kb, all suffixes of those prefixes should be
		equal (i.e. one suffix to all prefixes).

1.1 and 1.3 are achieved automatically by properly calculating the coordinates
from the ast. The rest are needed to be checked with every merge.

Below x,y are coords, *x and *y denote their representative (or its color only).
x~y means they're in the same equivalence class.

5 throw rules:
									 *x list
	 *x atom			*x var				 *y list
	 *y atom	       		*y var		*x atom		  x ~ y
	  x = y        	x atom       	x < y		*y list		 exists z > x
	  x!=y        	x < y		x ~ y		 x ~ y	        	z!< y
	---------	-------		-------		-------		-------------
	 throw		 throw		 throw		 throw		   throw 

one merge rule:

	*x = *y
	-------
	 x ~ y

means that coordinates that point to the same value are always equivalent.

2 list intro:

		      			 *x var  
	 *x var				 *y var  
	 *y var or atom or list		 x < y  
	 x < y 				 x!~ y  
	------------------------	--------
	 *x list			 *x list 

2 nop cases:

	        			  *x list 
	 *x atom			  *y list 
	 *y atom			  or atom 
	 x = y and *x = *y		  x < y  
	------------------		 -------- 
	  nop   			   nop    


Caching
=======

All coordinates has to be maintained uniquely, and to keep a pointer to their
longest prefix coordinate. 

